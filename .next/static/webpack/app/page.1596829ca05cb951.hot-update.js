"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./utils/sampleDataGenerator.ts":
/*!**************************************!*\
  !*** ./utils/sampleDataGenerator.ts ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateSampleData: () => (/* binding */ generateSampleData)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n\nfunction generateRandomDate(start, end) {\n    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\n}\nconst avatarEmojis = [\n    '😀',\n    '😎',\n    '🤓',\n    '🧐',\n    '🤠'\n];\nconst exampleMessages = [\n    \"Hey, how's it going?\",\n    \"Did you see the latest project update?\",\n    \"I'm working on the new feature now.\",\n    \"Can we schedule a meeting for tomorrow?\",\n    \"Great job on the presentation!\",\n    \"I need some help with this bug.\",\n    \"What do you think about the new design?\",\n    \"Don't forget about the team lunch next week.\",\n    \"I've just pushed the changes to the repo.\",\n    \"Has anyone tested the latest build yet?\"\n];\nconst sampleFiles = [\n    {\n        filename: 'presentation.pdf',\n        fileUrl: 'https://example.com/files/presentation.pdf',\n        contentType: 'application/pdf'\n    },\n    {\n        filename: 'meeting-notes.pdf',\n        fileUrl: 'https://example.com/files/meeting-notes.pdf',\n        contentType: 'application/pdf'\n    },\n    {\n        filename: 'team-photo.jpg',\n        fileUrl: 'https://picsum.photos/800/600',\n        contentType: 'image/jpeg'\n    },\n    {\n        filename: 'screenshot.png',\n        fileUrl: 'https://picsum.photos/1024/768',\n        contentType: 'image/png'\n    },\n    {\n        filename: 'requirements.docx',\n        fileUrl: 'https://example.com/files/requirements.docx',\n        contentType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n    },\n    {\n        filename: 'data.xlsx',\n        fileUrl: 'https://example.com/files/data.xlsx',\n        contentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    }\n];\nfunction generateSampleData() {\n    const users = [\n        {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(),\n            name: 'Alice Johnson',\n            avatar: avatarEmojis[0],\n            createdAt: new Date('2023-01-01'),\n            updatedAt: new Date('2023-01-01')\n        },\n        {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(),\n            name: 'Bob Smith',\n            avatar: avatarEmojis[1],\n            createdAt: new Date('2023-01-02'),\n            updatedAt: new Date('2023-01-02')\n        },\n        {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(),\n            name: 'Charlie Brown',\n            avatar: avatarEmojis[2],\n            createdAt: new Date('2023-01-03'),\n            updatedAt: new Date('2023-01-03')\n        },\n        {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(),\n            name: 'Diana Prince',\n            avatar: avatarEmojis[3],\n            createdAt: new Date('2023-01-04'),\n            updatedAt: new Date('2023-01-04')\n        },\n        {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(),\n            name: 'Ethan Hunt',\n            avatar: avatarEmojis[4],\n            createdAt: new Date('2023-01-05'),\n            updatedAt: new Date('2023-01-05')\n        }\n    ];\n    users.forEach((u)=>{\n        u.isOnline = true;\n        u.status = \"Online\";\n    });\n    const channels = [\n        {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(),\n            name: 'General',\n            isPrivate: false,\n            createdAt: new Date('2023-01-01'),\n            updatedAt: new Date('2023-01-01')\n        },\n        {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(),\n            name: 'Random',\n            isPrivate: false,\n            createdAt: new Date('2023-01-02'),\n            updatedAt: new Date('2023-01-02')\n        },\n        {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(),\n            name: 'Team-Alpha',\n            isPrivate: true,\n            createdAt: new Date('2023-01-03'),\n            updatedAt: new Date('2023-01-03')\n        },\n        {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(),\n            name: 'Project-X',\n            isPrivate: true,\n            createdAt: new Date('2023-01-04'),\n            updatedAt: new Date('2023-01-04')\n        }\n    ];\n    const channelMemberships = [];\n    const messages = [];\n    const reactions = [];\n    const files = [];\n    // Generate channel memberships\n    channels.forEach((channel)=>{\n        users.forEach((user)=>{\n            if (Math.random() > 0.3) {\n                channelMemberships.push({\n                    id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(),\n                    channelId: channel.id,\n                    userId: user.id,\n                    createdAt: generateRandomDate(new Date('2023-01-01'), new Date())\n                });\n            }\n        });\n    });\n    // Generate messages\n    channelMemberships.forEach((membership)=>{\n        const messageCount = Math.floor(Math.random() * 10) + 1; // 1 to 10 messages per user per channel\n        for(let i = 0; i < messageCount; i++){\n            const messageId = (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n            const createdAt = generateRandomDate(new Date('2023-01-01'), new Date());\n            messages.push({\n                id: messageId,\n                channelId: membership.channelId,\n                senderId: membership.userId,\n                content: exampleMessages[i % exampleMessages.length],\n                parentMessageId: null,\n                createdAt: createdAt,\n                updatedAt: createdAt,\n                attachments: []\n            });\n            // Add reactions to some messages\n            if (Math.random() > 0.7) {\n                reactions.push({\n                    id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(),\n                    messageId: messageId,\n                    userId: users[Math.floor(Math.random() * users.length)].id,\n                    emoji: [\n                        '👍',\n                        '❤️',\n                        '😂',\n                        '🎉',\n                        '🤔'\n                    ][Math.floor(Math.random() * 5)],\n                    createdAt: generateRandomDate(createdAt, new Date())\n                });\n            }\n            // Add files to some messages\n            if (Math.random() > 0.9) {\n                const randomFile = sampleFiles[Math.floor(Math.random() * sampleFiles.length)];\n                const attachment = {\n                    id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(),\n                    messageId: messageId,\n                    ...randomFile,\n                    createdAt: generateRandomDate(createdAt, new Date())\n                };\n                messages[messages.length - 1].attachments.push(attachment);\n            }\n            // Add some threaded replies\n            if (Math.random() > 0.8) {\n                const replyCount = Math.floor(Math.random() * 3) + 1; // 1 to 3 replies\n                for(let j = 0; j < replyCount; j++){\n                    const replyId = (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n                    const replyCreatedAt = generateRandomDate(createdAt, new Date());\n                    messages.push({\n                        id: replyId,\n                        channelId: membership.channelId,\n                        senderId: users[Math.floor(Math.random() * users.length)].id,\n                        content: exampleMessages[(i + j + 1) % exampleMessages.length],\n                        parentMessageId: messageId,\n                        createdAt: replyCreatedAt,\n                        updatedAt: replyCreatedAt,\n                        attachments: []\n                    });\n                }\n            }\n        }\n    });\n    // Generate direct messages (represented as private channels between two users)\n    for(let i = 0; i < users.length; i++){\n        for(let j = i + 1; j < users.length; j++){\n            const dmChannelId = (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n            const dmCreatedAt = generateRandomDate(new Date('2023-01-01'), new Date());\n            channels.push({\n                id: dmChannelId,\n                name: \"DM: \".concat(users[i].name, \" and \").concat(users[j].name),\n                isPrivate: true,\n                createdAt: dmCreatedAt,\n                updatedAt: dmCreatedAt\n            });\n            channelMemberships.push({\n                id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(),\n                channelId: dmChannelId,\n                userId: users[i].id,\n                createdAt: dmCreatedAt\n            }, {\n                id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(),\n                channelId: dmChannelId,\n                userId: users[j].id,\n                createdAt: dmCreatedAt\n            });\n            // Generate some DM messages\n            const dmMessageCount = Math.floor(Math.random() * 5) + 1; // 1 to 5 messages per DM\n            for(let k = 0; k < dmMessageCount; k++){\n                const sender = Math.random() > 0.5 ? users[i] : users[j];\n                const messageId = (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n                const createdAt = generateRandomDate(dmCreatedAt, new Date());\n                const message = {\n                    id: messageId,\n                    channelId: dmChannelId,\n                    senderId: sender.id,\n                    content: exampleMessages[k % exampleMessages.length],\n                    parentMessageId: null,\n                    createdAt: createdAt,\n                    updatedAt: createdAt,\n                    attachments: []\n                };\n                // 20% chance of attachments in DMs\n                if (Math.random() > 0.8) {\n                    const addMultipleAttachments = (message)=>{\n                        const attachmentCount = Math.floor(Math.random() * 3) + 1; // 1-3 attachments\n                        for(let i = 0; i < attachmentCount; i++){\n                            const randomFile = sampleFiles[Math.floor(Math.random() * sampleFiles.length)];\n                            message.attachments.push({\n                                id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(),\n                                messageId: message.id,\n                                ...randomFile,\n                                createdAt: generateRandomDate(message.createdAt, new Date())\n                            });\n                        }\n                    };\n                    addMultipleAttachments(message);\n                }\n                messages.push(message);\n            }\n        }\n    }\n    return {\n        users,\n        channels,\n        channelMemberships,\n        messages,\n        reactions,\n        files\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./utils/sampleDataGenerator.ts\n"));

/***/ })

});